<link rel="stylesheet" href="/css/writing.css">
<form method="post" name="new" onsubmit="copy()">
	<fieldset>
		<h1><input id="title" spellcheck="false" autocomplete="off" name="title" placeholder="Title"></h1>
		<textarea class="markdown" name="markdown" id="text" placeholder="Write ..."></textarea>
		<button type="submit">Submit</button>
	</fieldset>
</form>
<script type="text/javascript">

	// LocalStorage loops(?) to save both post title and content to cache.
	// Looks ugly, but better than AJAX based failover, right?
	// Modified version of this: https://gist.github.com/addyosmani/d1f3ca715ac902788c2d

	with({
		l: localStorage // Alias for localStorage, where we'll store text content
	// This is some sort of variable initialization. It also checks whether there is anything in cache already.
	}) with(document.getElementById("text")) if (l.getItem("c") != null) {
		value = [l.c], // Replace placeholder text with localstorage content.
		oninput = function () {
			l.c = value // Save Markdown context to localStorage.
		}
	} else {
		oninput = function () {
			l.c = value
		}
	}

	// For a yet another unknown reason we need two instances of localstorage.
	// Fundamentally analogous to the loop above.
	with({
		l2: localStorage,
	}) with(document.getElementById("title")) if (l2.getItem("t") != null) {
		document.new.title.value = [l2.t],
		oninput = function () {
			l2.t = document.new.title.value
		}
	} else {
		oninput = function () {
			l2.t = document.new.title.value
		}
	}

	// Copy data from contenteditable to textarea for POST to gather the data correctly.
	// Also clear localstorage for next new post.
	function copy() {
		localStorage.removeItem("t");
		localStorage.removeItem("c");
		var html = document.getElementById("text").innerHTML;
		return
	}
</script>
